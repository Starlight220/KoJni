package io.github.starlight.kojni
class JniFunction(
    val fqcontainer: String,
    val static: Boolean,
    val name: String,
    val retVal: String,
    val args: List<String>
) {
}

fun File(u_fqcontainer: String, functions: String): String {
    return """
        /* DO NOT EDIT THIS FILE - it is machine generated */
        #include <jni.h>
        /* Header for class ${u_fqcontainer} */

        #ifndef _Included_${u_fqcontainer}
        #define _Included_${u_fqcontainer}
        #ifdef __cplusplus
        extern "C" {
        #endif
        
        ${functions}

        #ifdef __cplusplus
        }
        #endif
        #endif
    """.trimIndent()
}

fun Function(fqcontainer: String, method: String, args: Signature, retVal: String, static: Boolean): String {
    return """
        /*
         * Class:     ${fqcontainer}
         * Method:    ${method}
         * Signature: (${args.d_args})${mapTypeToD(retVal)}
         */
        JNIEXPORT ${mapTypeToC(retVal)} JNICALL Java_${fqcontainer}
          (JNIEnv *, ${if (static) "jclass" else "jobject"}${args.c_args});
        
    """.trimIndent()
}

class Signature(private val argList: List<String>) {
    val c_args: String by lazy {
        val builder = StringBuilder()
        argList.forEach { builder.append(", ").append(mapTypeToC(it)) }
        return@lazy builder.toString()
    }
    val d_args: String by lazy {
        val builder = StringBuilder()
        argList.forEach { builder.append(mapTypeToD(it)) }
        return@lazy builder.toString()
    }
}

internal fun mapTypeToC(type: String, recursed: Boolean = false): String {
    val javaPrimitives =
        setOf("boolean", "byte", "char", "short", "int", "long", "float", "double")
    return when {
        type in javaPrimitives -> "j$type"
        type == "void" -> "void"
        type.contains("[]") -> mapTypeToC(
            type.replaceFirst("[]", ""),
            true
        ) + if (!recursed) "Array" else ""
        type == "java.lang.Class" -> "jclass"
        type == "java.lang.String" -> "jstring"
        type == "java.lang.Throwable" -> "jthrowable"
        else -> "jobject"
    }
}

internal fun mapTypeToD(type: String): String {
    return when (type) {
        "boolean" -> "Z"
        "byte" -> "B"
        "char" -> "C"
        "short" -> "S"
        "int" -> "I"
        "long" -> "J"
        "float" -> "F"
        "double" -> "D"
        "void" -> "V"
        else -> if (type.contains("[]")) {
            "[" + mapTypeToD(type.replaceFirst("[]", ""))
        } else {
            "L" + type.replace('.', '/')
        }
    }

}

